// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceServiceClient is the client API for ServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceServiceClient interface {
	AddOneService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceReply, error)
	AddManyService(ctx context.Context, opts ...grpc.CallOption) (ServiceService_AddManyServiceClient, error)
}

type serviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceServiceClient(cc grpc.ClientConnInterface) ServiceServiceClient {
	return &serviceServiceClient{cc}
}

func (c *serviceServiceClient) AddOneService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceReply, error) {
	out := new(ServiceReply)
	err := c.cc.Invoke(ctx, "/ServiceService/AddOneService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) AddManyService(ctx context.Context, opts ...grpc.CallOption) (ServiceService_AddManyServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[0], "/ServiceService/AddManyService", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceServiceAddManyServiceClient{stream}
	return x, nil
}

type ServiceService_AddManyServiceClient interface {
	Send(*ServiceRequest) error
	CloseAndRecv() (*StreamServiceReply, error)
	grpc.ClientStream
}

type serviceServiceAddManyServiceClient struct {
	grpc.ClientStream
}

func (x *serviceServiceAddManyServiceClient) Send(m *ServiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceServiceAddManyServiceClient) CloseAndRecv() (*StreamServiceReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamServiceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServiceServer is the server API for ServiceService service.
// All implementations must embed UnimplementedServiceServiceServer
// for forward compatibility
type ServiceServiceServer interface {
	AddOneService(context.Context, *ServiceRequest) (*ServiceReply, error)
	AddManyService(ServiceService_AddManyServiceServer) error
	mustEmbedUnimplementedServiceServiceServer()
}

// UnimplementedServiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServiceServer struct {
}

func (UnimplementedServiceServiceServer) AddOneService(context.Context, *ServiceRequest) (*ServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOneService not implemented")
}
func (UnimplementedServiceServiceServer) AddManyService(ServiceService_AddManyServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method AddManyService not implemented")
}
func (UnimplementedServiceServiceServer) mustEmbedUnimplementedServiceServiceServer() {}

// UnsafeServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServiceServer will
// result in compilation errors.
type UnsafeServiceServiceServer interface {
	mustEmbedUnimplementedServiceServiceServer()
}

func RegisterServiceServiceServer(s grpc.ServiceRegistrar, srv ServiceServiceServer) {
	s.RegisterService(&ServiceService_ServiceDesc, srv)
}

func _ServiceService_AddOneService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).AddOneService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceService/AddOneService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).AddOneService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_AddManyService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServiceServer).AddManyService(&serviceServiceAddManyServiceServer{stream})
}

type ServiceService_AddManyServiceServer interface {
	SendAndClose(*StreamServiceReply) error
	Recv() (*ServiceRequest, error)
	grpc.ServerStream
}

type serviceServiceAddManyServiceServer struct {
	grpc.ServerStream
}

func (x *serviceServiceAddManyServiceServer) SendAndClose(m *StreamServiceReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceServiceAddManyServiceServer) Recv() (*ServiceRequest, error) {
	m := new(ServiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceService_ServiceDesc is the grpc.ServiceDesc for ServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceService",
	HandlerType: (*ServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOneService",
			Handler:    _ServiceService_AddOneService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddManyService",
			Handler:       _ServiceService_AddManyService_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
